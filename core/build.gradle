plugins {
    id("com.github.johnrengelman.shadow") version "7.1.0"
    id("io.micronaut.application") version "3.0.2"
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

version = "0.1"
group = "org.zerobs.polla"

repositories {
    mavenCentral()
}

micronaut {
    runtime("lambda")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.zerobs.polla.*")
    }
}

dependencies {
    def micronautVersion = '3.2.3'
    implementation "io.micronaut:micronaut-runtime:${micronautVersion}"
    implementation "io.micronaut:micronaut-validation:${micronautVersion}"
    testImplementation "io.micronaut:micronaut-http-client:${micronautVersion}"
    //annotationProcessor "io.micronaut:micronaut-inject-java:${micronautVersion}"
    //compileOnly "io.micronaut:micronaut-aop:${micronautVersion}"

    def micronautAwsVersion = '3.1.0'
    implementation "io.micronaut.aws:micronaut-aws-sdk-v2:${micronautAwsVersion}"
    implementation "io.micronaut.aws:micronaut-function-aws-api-proxy:${micronautAwsVersion}"
    implementation "io.micronaut.aws:micronaut-function-aws-custom-runtime:${micronautAwsVersion}"

    compileOnly 'org.graalvm.nativeimage:svm:21.3.0'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.10'

    implementation platform("software.amazon.awssdk:bom:2.17.102")
    implementation 'software.amazon.awssdk:lambda'
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:dynamodb-enhanced'

    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'com.google.guava:guava:31.0.1-jre'
}


application {
    mainClass.set("org.zerobs.polla.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "polla-backend-core"
        property "sonar.projectName", "polla-backend-core"
    }
}

tasks.named('sonarqube').configure {
    dependsOn test
}

graalvmNative {
    binaries {
        main {
            def graalvmConfigPath = 'resources/graalvm_config/'
            buildArgs "-H:DynamicProxyConfigurationFiles=${graalvmConfigPath}dynamic-proxies.json",
                    "-H:ReflectionConfigurationFiles=${graalvmConfigPath}reflect-config.json"
        }
    }
}